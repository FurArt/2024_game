{"mappings":"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","sources":["<anon>","src/scripts/game.js"],"sourcesContent":["\"use strict\";\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nvar Game = /*#__PURE__*/ function() {\n    function Game() {\n        _class_call_check(this, Game);\n        this.scoreTotal = 0;\n        this.rows = document.querySelectorAll(\".field-row\");\n        this.gameScoreElement = document.querySelector(\".game-score\");\n        this.fieldCells = document.querySelectorAll(\".field-cell\");\n        this.startMessage = document.querySelector(\".message-start\");\n        this.loseMessage = document.querySelector(\".message-lose\");\n        this.winMessage = document.querySelector(\".message-win\");\n        this.startButton = document.querySelector(\".button.start\");\n        this.restartButton = document.querySelector(\".button.restart\");\n    }\n    _create_class(Game, [\n        {\n            key: \"isBoardEmpty\",\n            value: function isBoardEmpty() {\n                return Array.from(this.fieldCells).every(function(cell) {\n                    return !cell.textContent;\n                });\n            }\n        },\n        {\n            key: \"initializeBoard\",\n            value: function initializeBoard() {\n                this.resetCells(this.fieldCells);\n                this.addNewNumber();\n                this.updateBoard();\n            }\n        },\n        {\n            key: \"updateScored\",\n            value: function updateScored(mergedValue) {\n                this.scoreTotal += parseInt(mergedValue, 10);\n                this.gameScoreElement.textContent = this.scoreTotal;\n            }\n        },\n        {\n            key: \"randomNumCells\",\n            value: function randomNumCells(cells) {\n                return Math.floor(Math.random() * cells.length);\n            }\n        },\n        {\n            key: \"addNewNumber\",\n            value: function addNewNumber() {\n                var emptyCells = this.findEmptyCells();\n                if (emptyCells.length > 0) {\n                    var randomEmptyCell = emptyCells[this.randomNumCells(emptyCells)];\n                    randomEmptyCell.textContent = this.generateRandomNumber();\n                }\n            }\n        },\n        {\n            key: \"updateBoard\",\n            value: function updateBoard() {\n                this.fieldCells.forEach(function(cell) {\n                    cell.textContent = cell.textContent === \"0\" ? \"\" : cell.textContent;\n                });\n                this.gameScoreElement.textContent = this.scoreTotal;\n            }\n        },\n        {\n            key: \"findEmptyCells\",\n            value: function findEmptyCells() {\n                return Array.from(this.fieldCells).filter(function(cell) {\n                    return !cell.textContent;\n                });\n            }\n        },\n        {\n            key: \"resetCells\",\n            value: function resetCells(cells) {\n                var _this = this;\n                cells.forEach(function(cell) {\n                    cell.textContent = \"\";\n                    _this.clearCellClass(cell);\n                });\n                this.gameScoreElement.textContent = 0;\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    var currentCell = this.getCellAtPosition(i, j);\n                    if (j < 3 && currentCell.textContent === this.getCellAtPosition(i, j + 1).textContent) return true;\n                    if (i < 3 && currentCell.textContent === this.getCellAtPosition(i + 1, j).textContent) return true;\n                }\n                return this.findEmptyCells().length > 0;\n            }\n        },\n        {\n            key: \"generateRandomNumber\",\n            value: function generateRandomNumber() {\n                return Math.random() < 0.9 ? \"2\" : \"4\";\n            }\n        },\n        {\n            key: \"getCellAtPosition\",\n            value: function getCellAtPosition(row, col) {\n                return document.querySelector(\".field-row:nth-child(\".concat(row + 1, \") .field-cell:nth-child(\").concat(col + 1, \")\"));\n            }\n        },\n        {\n            key: \"clearCellClass\",\n            value: function clearCellClass(cell) {\n                cell.className = \"field-cell\";\n            }\n        },\n        {\n            key: \"updateCellClass\",\n            value: function updateCellClass(cell, value) {\n                this.clearCellClass(cell);\n                cell.classList.add(\"field-cell--\".concat(value));\n            }\n        },\n        {\n            key: \"removeEmptyCells\",\n            value: function removeEmptyCells(cells) {\n                return cells.filter(function(cell) {\n                    return cell.textContent !== \"\";\n                });\n            }\n        },\n        {\n            key: \"generateRandomCell\",\n            value: function generateRandomCell() {\n                var emptyCells = Array.from(this.fieldCells).filter(function(cell) {\n                    return !cell.textContent;\n                });\n                if (emptyCells.length > 0) {\n                    var randomEmptyCell = emptyCells[this.randomNumCells(emptyCells)];\n                    var newValue = this.generateRandomNumber();\n                    randomEmptyCell.textContent = newValue;\n                    this.updateCellClass(randomEmptyCell, newValue);\n                }\n            }\n        },\n        {\n            key: \"checkFor2048\",\n            value: function checkFor2048() {\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    var cell = this.getCellAtPosition(i, j);\n                    if (cell.textContent === \"2048\") return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"handleMessages\",\n            value: function handleMessages() {\n                if (!this.canMove()) this.loseMessage.classList.remove(\"hidden\");\n                else this.startMessage.classList.add(\"hidden\");\n                if (this.checkFor2048()) this.winMessage.classList.remove(\"hidden\");\n                else this.winMessage.classList.add(\"hidden\");\n            }\n        },\n        {\n            key: \"moveCellsLeft\",\n            value: function moveCellsLeft() {\n                var _this = this;\n                var isChanged = false;\n                this.rows.forEach(function(row) {\n                    var cells = Array.from(row.querySelectorAll(\".field-cell\"));\n                    var nonEmptyCells = _this.removeEmptyCells(cells);\n                    for(var i = 0; i < nonEmptyCells.length - 1; i++){\n                        var currentCell = nonEmptyCells[i];\n                        var nextCell = nonEmptyCells[i + 1];\n                        if (currentCell.textContent === nextCell.textContent && currentCell.textContent !== \"\") {\n                            var mergedValue = parseInt(currentCell.textContent) * 2;\n                            currentCell.textContent = mergedValue;\n                            nextCell.textContent = \"\";\n                            isChanged = true;\n                            _this.updateCellClass(currentCell, mergedValue);\n                            _this.updateScored(mergedValue);\n                            break;\n                        }\n                    }\n                    var j = 0;\n                    for(var i1 = 0; i1 < nonEmptyCells.length; i1++)if (nonEmptyCells[i1].textContent !== \"\") {\n                        if (cells[j].textContent !== nonEmptyCells[i1].textContent) {\n                            cells[j].textContent = nonEmptyCells[i1].textContent;\n                            _this.updateCellClass(cells[j], nonEmptyCells[i1].textContent);\n                            isChanged = true;\n                        }\n                        j++;\n                    }\n                    for(var i2 = j; i2 < cells.length; i2++){\n                        cells[i2].textContent = \"\";\n                        _this.clearCellClass(cells[i2]);\n                    }\n                });\n                if (isChanged) this.generateRandomCell();\n            }\n        },\n        {\n            key: \"moveCellsRight\",\n            value: function moveCellsRight() {\n                var _this = this;\n                var isChanged = false;\n                this.rows.forEach(function(row) {\n                    var cells = Array.from(row.querySelectorAll(\".field-cell\"));\n                    var nonEmptyCells = _this.removeEmptyCells(cells);\n                    for(var i = nonEmptyCells.length - 1; i > 0; i--){\n                        var currentCell = nonEmptyCells[i];\n                        var prevCell = nonEmptyCells[i - 1];\n                        if (currentCell.textContent === prevCell.textContent && currentCell.textContent !== \"\") {\n                            var mergedValue = parseInt(currentCell.textContent) * 2;\n                            currentCell.textContent = mergedValue;\n                            prevCell.textContent = \"\";\n                            isChanged = true;\n                            _this.updateScored(mergedValue);\n                            _this.updateCellClass(currentCell, mergedValue);\n                            break;\n                        }\n                    }\n                    var j = cells.length - 1;\n                    for(var i1 = nonEmptyCells.length - 1; i1 >= 0; i1--)if (nonEmptyCells[i1].textContent !== \"\") {\n                        if (cells[j].textContent !== nonEmptyCells[i1].textContent) {\n                            cells[j].textContent = nonEmptyCells[i1].textContent;\n                            _this.updateCellClass(cells[j], nonEmptyCells[i1].textContent);\n                            isChanged = true;\n                        }\n                        j--;\n                    }\n                    for(var i2 = j; i2 >= 0; i2--){\n                        cells[i2].textContent = \"\";\n                        _this.clearCellClass(cells[i2]);\n                        if (cells[i2].textContent !== \"\") isChanged = true;\n                    }\n                });\n                if (isChanged) this.generateRandomCell();\n            }\n        },\n        {\n            key: \"moveCellsUp\",\n            value: function moveCellsUp() {\n                var isChanged = false;\n                for(var j = 0; j < 4; j++){\n                    var columnCells = [];\n                    for(var i = 0; i < 4; i++)columnCells.push(this.rows[i].querySelectorAll(\".field-cell\")[j]);\n                    var nonEmptyCells = this.removeEmptyCells(columnCells);\n                    for(var i1 = 0; i1 < nonEmptyCells.length - 1; i1++){\n                        var currentCell = nonEmptyCells[i1];\n                        var nextCell = nonEmptyCells[i1 + 1];\n                        if (currentCell.textContent === nextCell.textContent && currentCell.textContent !== \"\") {\n                            var mergedValue = parseInt(currentCell.textContent) * 2;\n                            currentCell.textContent = mergedValue;\n                            nextCell.textContent = \"\";\n                            this.updateCellClass(currentCell, mergedValue);\n                            this.updateScored(mergedValue);\n                            isChanged = true;\n                            break;\n                        }\n                    }\n                    var k = 0;\n                    for(var i2 = 0; i2 < nonEmptyCells.length; i2++)if (nonEmptyCells[i2].textContent !== \"\") {\n                        if (columnCells[k].textContent !== nonEmptyCells[i2].textContent) {\n                            columnCells[k].textContent = nonEmptyCells[i2].textContent;\n                            this.updateCellClass(columnCells[k], nonEmptyCells[i2].textContent);\n                            isChanged = true;\n                        }\n                        k++;\n                    }\n                    for(var i3 = k; i3 < 4; i3++){\n                        columnCells[i3].textContent = \"\";\n                        this.clearCellClass(columnCells[i3]);\n                        if (columnCells[i3].textContent !== \"\") isChanged = true;\n                    }\n                }\n                if (isChanged) this.generateRandomCell();\n            }\n        },\n        {\n            key: \"moveCellsDown\",\n            value: function moveCellsDown() {\n                var isChanged = false;\n                for(var j = 0; j < 4; j++){\n                    var columnCells = [];\n                    for(var i = 3; i >= 0; i--)columnCells.push(this.rows[i].querySelectorAll(\".field-cell\")[j]);\n                    var nonEmptyCells = this.removeEmptyCells(columnCells);\n                    for(var i1 = nonEmptyCells.length - 1; i1 > 0; i1--){\n                        var currentCell = nonEmptyCells[i1];\n                        var prevCell = nonEmptyCells[i1 - 1];\n                        if (currentCell.textContent === prevCell.textContent && currentCell.textContent !== \"\") {\n                            var mergedValue = parseInt(currentCell.textContent) * 2;\n                            currentCell.textContent = mergedValue;\n                            prevCell.textContent = \"\";\n                            this.updateCellClass(currentCell, mergedValue);\n                            this.updateScored(mergedValue);\n                            isChanged = true;\n                            break;\n                        }\n                    }\n                    var k = 0;\n                    for(var i2 = 0; i2 < nonEmptyCells.length; i2++)if (nonEmptyCells[i2].textContent !== \"\") {\n                        if (columnCells[k].textContent !== nonEmptyCells[i2].textContent) {\n                            columnCells[k].textContent = nonEmptyCells[i2].textContent;\n                            this.updateCellClass(columnCells[k], nonEmptyCells[i2].textContent);\n                            isChanged = true;\n                        }\n                        k++;\n                    }\n                    for(var i3 = k; i3 < 4; i3++)if (columnCells[i3].textContent !== \"\") {\n                        columnCells[i3].textContent = \"\";\n                        isChanged = true;\n                        this.clearCellClass(columnCells[i3]);\n                    }\n                }\n                if (isChanged) this.generateRandomCell();\n            }\n        }\n    ]);\n    return Game;\n}();\nwindow.Game = Game;\n\n//# sourceMappingURL=index.749134a8.js.map\n","'use strict';\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.scoreTotal = 0;\r\n    this.rows = document.querySelectorAll('.field-row');\r\n    this.gameScoreElement = document.querySelector('.game-score');\r\n    this.fieldCells = document.querySelectorAll('.field-cell');\r\n    this.startMessage = document.querySelector('.message-start');\r\n    this.loseMessage = document.querySelector('.message-lose');\r\n    this.winMessage = document.querySelector('.message-win');\r\n    this.startButton = document.querySelector('.button.start');\r\n    this.restartButton = document.querySelector('.button.restart');\r\n  }\r\n\r\n  isBoardEmpty() {\r\n    return Array.from(this.fieldCells).every(cell => !cell.textContent);\r\n  }\r\n\r\n  initializeBoard() {\r\n    this.resetCells(this.fieldCells);\r\n    this.addNewNumber();\r\n    this.updateBoard();\r\n  }\r\n\r\n  updateScored(mergedValue) {\r\n    this.scoreTotal += parseInt(mergedValue, 10);\r\n    this.gameScoreElement.textContent = this.scoreTotal;\r\n  }\r\n\r\n  randomNumCells(cells) {\r\n    return Math.floor(Math.random() * cells.length);\r\n  }\r\n\r\n  addNewNumber() {\r\n    const emptyCells = this.findEmptyCells();\r\n\r\n    if (emptyCells.length > 0) {\r\n      const randomEmptyCell = emptyCells[this.randomNumCells(emptyCells)];\r\n\r\n      randomEmptyCell.textContent = this.generateRandomNumber();\r\n    }\r\n  }\r\n\r\n  updateBoard() {\r\n    this.fieldCells.forEach(cell => {\r\n      cell.textContent = cell.textContent === '0' ? '' : cell.textContent;\r\n    });\r\n    this.gameScoreElement.textContent = this.scoreTotal;\r\n  }\r\n\r\n  findEmptyCells() {\r\n    return Array.from(this.fieldCells).filter(cell => !cell.textContent);\r\n  }\r\n\r\n  resetCells(cells) {\r\n    cells.forEach(cell => {\r\n      cell.textContent = '';\r\n      this.clearCellClass(cell);\r\n    });\r\n    this.gameScoreElement.textContent = 0;\r\n  }\r\n\r\n  canMove() {\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        const currentCell = this.getCellAtPosition(i, j);\r\n\r\n        if (j < 3 && currentCell.textContent === this.getCellAtPosition(i, j + 1).textContent) {\r\n          return true;\r\n        }\r\n\r\n        if (i < 3 && currentCell.textContent === this.getCellAtPosition(i + 1, j).textContent) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.findEmptyCells().length > 0;\r\n  }\r\n\r\n  generateRandomNumber() {\r\n    return Math.random() < 0.9 ? '2' : '4';\r\n  }\r\n\r\n  getCellAtPosition(row, col) {\r\n    return document.querySelector(`.field-row:nth-child(${row + 1}) .field-cell:nth-child(${col + 1})`);\r\n  }\r\n\r\n  clearCellClass(cell) {\r\n    cell.className = 'field-cell';\r\n  }\r\n\r\n  updateCellClass(cell, value) {\r\n    this.clearCellClass(cell);\r\n    cell.classList.add(`field-cell--${value}`);\r\n  }\r\n\r\n  removeEmptyCells(cells) {\r\n    return cells.filter(cell => cell.textContent !== '');\r\n  }\r\n\r\n  generateRandomCell() {\r\n    const emptyCells = Array.from(this.fieldCells)\r\n      .filter(cell => !cell.textContent);\r\n\r\n    if (emptyCells.length > 0) {\r\n      const randomEmptyCell = emptyCells[this.randomNumCells(emptyCells)];\r\n      const newValue = this.generateRandomNumber();\r\n\r\n      randomEmptyCell.textContent = newValue;\r\n      this.updateCellClass(randomEmptyCell, newValue);\r\n    }\r\n  }\r\n\r\n  checkFor2048() {\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        const cell = this.getCellAtPosition(i, j);\r\n\r\n        if (cell.textContent === '2048') {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n  handleMessages() {\r\n    if (!this.canMove()) {\r\n      this.loseMessage.classList.remove('hidden');\r\n    } else {\r\n      this.startMessage.classList.add('hidden');\r\n    }\r\n\r\n    if (this.checkFor2048()) {\r\n      this.winMessage.classList.remove('hidden');\r\n    } else {\r\n      this.winMessage.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  moveCellsLeft() {\r\n    let isChanged = false;\r\n\r\n    this.rows.forEach(row => {\r\n      const cells = Array.from(row.querySelectorAll('.field-cell'));\r\n      const nonEmptyCells = this.removeEmptyCells(cells);\r\n\r\n      for (let i = 0; i < nonEmptyCells.length - 1; i++) {\r\n        const currentCell = nonEmptyCells[i];\r\n        const nextCell = nonEmptyCells[i + 1];\r\n\r\n        if (currentCell.textContent === nextCell.textContent && currentCell.textContent !== '') {\r\n          const mergedValue = parseInt(currentCell.textContent) * 2;\r\n\r\n          currentCell.textContent = mergedValue;\r\n          nextCell.textContent = '';\r\n          isChanged = true;\r\n          this.updateCellClass(currentCell, mergedValue);\r\n\r\n          this.updateScored(mergedValue);\r\n          break;\r\n        }\r\n      }\r\n\r\n      let j = 0;\r\n\r\n      for (let i = 0; i < nonEmptyCells.length; i++) {\r\n        if (nonEmptyCells[i].textContent !== '') {\r\n          if (cells[j].textContent !== nonEmptyCells[i].textContent) {\r\n            cells[j].textContent = nonEmptyCells[i].textContent;\r\n            this.updateCellClass(cells[j], nonEmptyCells[i].textContent);\r\n\r\n            isChanged = true;\r\n          }\r\n          j++;\r\n        }\r\n      }\r\n\r\n      for (let i = j; i < cells.length; i++) {\r\n        cells[i].textContent = '';\r\n        this.clearCellClass(cells[i]);\r\n      }\r\n    });\r\n\r\n    if (isChanged) {\r\n      this.generateRandomCell();\r\n    }\r\n  }\r\n\r\n  moveCellsRight() {\r\n    let isChanged = false;\r\n\r\n    this.rows.forEach(row => {\r\n      const cells = Array.from(row.querySelectorAll('.field-cell'));\r\n      const nonEmptyCells = this.removeEmptyCells(cells);\r\n\r\n      for (let i = nonEmptyCells.length - 1; i > 0; i--) {\r\n        const currentCell = nonEmptyCells[i];\r\n        const prevCell = nonEmptyCells[i - 1];\r\n\r\n        if (currentCell.textContent === prevCell.textContent\r\n          && currentCell.textContent !== '') {\r\n          const mergedValue = parseInt(currentCell.textContent) * 2;\r\n\r\n          currentCell.textContent = mergedValue;\r\n          prevCell.textContent = '';\r\n          isChanged = true;\r\n          this.updateScored(mergedValue);\r\n          this.updateCellClass(currentCell, mergedValue);\r\n          break;\r\n        }\r\n      }\r\n\r\n      let j = cells.length - 1;\r\n\r\n      for (let i = nonEmptyCells.length - 1; i >= 0; i--) {\r\n        if (nonEmptyCells[i].textContent !== '') {\r\n          if (cells[j].textContent !== nonEmptyCells[i].textContent) {\r\n            cells[j].textContent = nonEmptyCells[i].textContent;\r\n            this.updateCellClass(cells[j], nonEmptyCells[i].textContent);\r\n\r\n            isChanged = true;\r\n          }\r\n          j--;\r\n        }\r\n      }\r\n\r\n      for (let i = j; i >= 0; i--) {\r\n        cells[i].textContent = '';\r\n        this.clearCellClass(cells[i]);\r\n\r\n        if (cells[i].textContent !== '') {\r\n          isChanged = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (isChanged) {\r\n      this.generateRandomCell();\r\n    }\r\n  }\r\n\r\n  moveCellsUp() {\r\n    let isChanged = false;\r\n\r\n    for (let j = 0; j < 4; j++) {\r\n      const columnCells = [];\r\n\r\n      for (let i = 0; i < 4; i++) {\r\n        columnCells.push(this.rows[i].querySelectorAll('.field-cell')[j]);\r\n      }\r\n\r\n      const nonEmptyCells = this.removeEmptyCells(columnCells);\r\n\r\n      for (let i = 0; i < nonEmptyCells.length - 1; i++) {\r\n        const currentCell = nonEmptyCells[i];\r\n        const nextCell = nonEmptyCells[i + 1];\r\n\r\n        if (currentCell.textContent === nextCell.textContent\r\n          && currentCell.textContent !== '') {\r\n          const mergedValue = parseInt(currentCell.textContent) * 2;\r\n\r\n          currentCell.textContent = mergedValue;\r\n          nextCell.textContent = '';\r\n\r\n          this.updateCellClass(currentCell, mergedValue);\r\n          this.updateScored(mergedValue);\r\n          isChanged = true;\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      let k = 0;\r\n\r\n      for (let i = 0; i < nonEmptyCells.length; i++) {\r\n        if (nonEmptyCells[i].textContent !== '') {\r\n          if (columnCells[k].textContent !== nonEmptyCells[i].textContent) {\r\n            columnCells[k].textContent = nonEmptyCells[i].textContent;\r\n            this.updateCellClass(columnCells[k], nonEmptyCells[i].textContent);\r\n            isChanged = true;\r\n          }\r\n          k++;\r\n        }\r\n      }\r\n\r\n      for (let i = k; i < 4; i++) {\r\n        columnCells[i].textContent = '';\r\n        this.clearCellClass(columnCells[i]);\r\n\r\n        if (columnCells[i].textContent !== '') {\r\n          isChanged = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isChanged) {\r\n      this.generateRandomCell();\r\n    }\r\n  }\r\n\r\n  moveCellsDown() {\r\n    let isChanged = false;\r\n\r\n    for (let j = 0; j < 4; j++) {\r\n      const columnCells = [];\r\n\r\n      for (let i = 3; i >= 0; i--) {\r\n        columnCells.push(this.rows[i].querySelectorAll('.field-cell')[j]);\r\n      }\r\n\r\n      const nonEmptyCells = this.removeEmptyCells(columnCells);\r\n\r\n      for (let i = nonEmptyCells.length - 1; i > 0; i--) {\r\n        const currentCell = nonEmptyCells[i];\r\n        const prevCell = nonEmptyCells[i - 1];\r\n\r\n        if (currentCell.textContent === prevCell.textContent\r\n          && currentCell.textContent !== '') {\r\n          const mergedValue = parseInt(currentCell.textContent) * 2;\r\n\r\n          currentCell.textContent = mergedValue;\r\n          prevCell.textContent = '';\r\n\r\n          this.updateCellClass(currentCell, mergedValue);\r\n          this.updateScored(mergedValue);\r\n          isChanged = true;\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      let k = 0;\r\n\r\n      for (let i = 0; i < nonEmptyCells.length; i++) {\r\n        if (nonEmptyCells[i].textContent !== '') {\r\n          if (columnCells[k].textContent !== nonEmptyCells[i].textContent) {\r\n            columnCells[k].textContent = nonEmptyCells[i].textContent;\r\n            this.updateCellClass(columnCells[k], nonEmptyCells[i].textContent);\r\n            isChanged = true;\r\n          }\r\n          k++;\r\n        }\r\n      }\r\n\r\n      for (let i = k; i < 4; i++) {\r\n        if (columnCells[i].textContent !== '') {\r\n          columnCells[i].textContent = '';\r\n          isChanged = true;\r\n          this.clearCellClass(columnCells[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isChanged) {\r\n      this.generateRandomCell();\r\n    }\r\n  }\r\n}\r\n\r\nwindow.Game = Game;\r\n"],"names":["Game","protoProps","_class_call_check","instance","Constructor","TypeError","scoreTotal","rows","document","querySelectorAll","gameScoreElement","querySelector","fieldCells","startMessage","loseMessage","winMessage","startButton","restartButton","key","value","Array","from","every","cell","textContent","resetCells","addNewNumber","updateBoard","mergedValue","parseInt","cells","Math","floor","random","length","emptyCells","findEmptyCells","randomEmptyCell","randomNumCells","generateRandomNumber","forEach","filter","_this","clearCellClass","i","j","currentCell","getCellAtPosition","row","col","concat","className","classList","add","newValue","updateCellClass","canMove","remove","checkFor2048","isChanged","nonEmptyCells","removeEmptyCells","nextCell","updateScored","i1","i2","generateRandomCell","prevCell","columnCells","push","k","i3","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","window"],"version":3,"file":"index.749134a8.js.map"}